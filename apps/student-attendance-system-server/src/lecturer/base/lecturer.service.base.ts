/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lecturer as PrismaLecturer,
  ClassModel as PrismaClassModel,
} from "@prisma/client";

export class LecturerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LecturerCountArgs, "select">): Promise<number> {
    return this.prisma.lecturer.count(args);
  }

  async lecturers(
    args: Prisma.LecturerFindManyArgs
  ): Promise<PrismaLecturer[]> {
    return this.prisma.lecturer.findMany(args);
  }
  async lecturer(
    args: Prisma.LecturerFindUniqueArgs
  ): Promise<PrismaLecturer | null> {
    return this.prisma.lecturer.findUnique(args);
  }
  async createLecturer(
    args: Prisma.LecturerCreateArgs
  ): Promise<PrismaLecturer> {
    return this.prisma.lecturer.create(args);
  }
  async updateLecturer(
    args: Prisma.LecturerUpdateArgs
  ): Promise<PrismaLecturer> {
    return this.prisma.lecturer.update(args);
  }
  async deleteLecturer(
    args: Prisma.LecturerDeleteArgs
  ): Promise<PrismaLecturer> {
    return this.prisma.lecturer.delete(args);
  }

  async findClasses(
    parentId: string,
    args: Prisma.ClassModelFindManyArgs
  ): Promise<PrismaClassModel[]> {
    return this.prisma.lecturer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .classes(args);
  }
}
