/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lecturer } from "./Lecturer";
import { LecturerCountArgs } from "./LecturerCountArgs";
import { LecturerFindManyArgs } from "./LecturerFindManyArgs";
import { LecturerFindUniqueArgs } from "./LecturerFindUniqueArgs";
import { CreateLecturerArgs } from "./CreateLecturerArgs";
import { UpdateLecturerArgs } from "./UpdateLecturerArgs";
import { DeleteLecturerArgs } from "./DeleteLecturerArgs";
import { ClassModelFindManyArgs } from "../../classModel/base/ClassModelFindManyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { LecturerService } from "../lecturer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lecturer)
export class LecturerResolverBase {
  constructor(
    protected readonly service: LecturerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "read",
    possession: "any",
  })
  async _lecturersMeta(
    @graphql.Args() args: LecturerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lecturer])
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "read",
    possession: "any",
  })
  async lecturers(
    @graphql.Args() args: LecturerFindManyArgs
  ): Promise<Lecturer[]> {
    return this.service.lecturers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lecturer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "read",
    possession: "own",
  })
  async lecturer(
    @graphql.Args() args: LecturerFindUniqueArgs
  ): Promise<Lecturer | null> {
    const result = await this.service.lecturer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lecturer)
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "create",
    possession: "any",
  })
  async createLecturer(
    @graphql.Args() args: CreateLecturerArgs
  ): Promise<Lecturer> {
    return await this.service.createLecturer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lecturer)
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "update",
    possession: "any",
  })
  async updateLecturer(
    @graphql.Args() args: UpdateLecturerArgs
  ): Promise<Lecturer | null> {
    try {
      return await this.service.updateLecturer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lecturer)
  @nestAccessControl.UseRoles({
    resource: "Lecturer",
    action: "delete",
    possession: "any",
  })
  async deleteLecturer(
    @graphql.Args() args: DeleteLecturerArgs
  ): Promise<Lecturer | null> {
    try {
      return await this.service.deleteLecturer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClassModel], { name: "classes" })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  async findClasses(
    @graphql.Parent() parent: Lecturer,
    @graphql.Args() args: ClassModelFindManyArgs
  ): Promise<ClassModel[]> {
    const results = await this.service.findClasses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
